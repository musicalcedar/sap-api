import { SapBusinessPartner } from '../../domain/entities/sapBusinessPartner';
import {
  AddressType,
  BilltoDefault,
  boolResponse,
  CardType,
  CompanyPrivate,
  Country,
  Currency,
  DiscountBaseObject,
  DiscountRelations,
  EffectivePrice,
  ExemptionMaxAmountValidationType,
  FatherType,
  OperationCode347,
  ResidenNumber,
  SapBusinessPartnerRaw,
  ShaamGroup,
  SubjectToWithholdingTax,
  TaxRoundingRule,
  TypeReport,
  UBpco,
  UCSSAPLAprobaciones,
  UCSSDim3,
  UManejo,
  VatLiable,
} from './types/sapBusinessPartnerRaw';
import { getDepartmentCode, getMunicipalityCode } from './utils/locationDictionaries';
export const mapToSapBusinessPartner = (raw: SapBusinessPartnerRaw): SapBusinessPartner => {
  return {
    code: raw.CardCode,
    name: raw.CardName,
    groupCode: raw.GroupCode,
    address: raw.Address,
    phone: raw.Phone1,
    federalTaxId: raw.FederalTaxID,
    city: raw.City,
    email: raw.EmailAddress,

    // Campos personalizados para Colombia
    U_EsAutorret: raw.U_EsAutorret,
    U_BPCO_RTC: raw.U_BPCO_RTC,
    U_BPCO_TDC: raw.U_BPCO_TDC,
    U_BPCO_CS: raw.U_BPCO_CS,
    U_BPCO_City: raw.U_BPCO_City,
    U_BPCO_TP: raw.U_BPCO_TP,
    U_BPCO_Nombre: raw.U_BPCO_Nombre,
    U_BPCO_1Apellido: raw.U_BPCO_1Apellido,
    U_BPCO_2Apellido: raw.U_BPCO_2Apellido,
    U_BPCO_Address: raw.U_BPCO_Address,
    U_Info_RUT: raw.U_Info_RUT,
    U_addInFaElectronica_email_contacto_FE: raw.U_addInFaElectronica_email_contacto_FE,
    U_Celular: raw.U_Celular,

    // Direcciones
    addresses:
      raw.BPAddresses?.map(addr => ({
        AddressName: addr.AddressName?.toString() || null,
        Street: addr.Street,
        Block: addr.Block?.toString() || null,
        ZipCode: addr.ZipCode?.toString() || null,
        City: addr.City,
        County: addr.County?.toString() || null,
        Country: addr.Country?.toString() || null,
        State: addr.State,
        FederalTaxID: addr.FederalTaxID?.toString() || null,
        TaxCode: addr.TaxCode?.toString() || null,
        BuildingFloorRoom: addr.BuildingFloorRoom?.toString() || null,
        AddressType: addr.AddressType?.toString() || null,
        AddressName2: addr.AddressName2?.toString() || null,
        AddressName3: addr.AddressName3?.toString() || null,
        TypeOfAddress: addr.TypeOfAddress?.toString() || null,
        RowNum: addr.RowNum,
        BPCode: addr.BPCode,
        GlobalLocationNumber: addr.GlobalLocationNumber?.toString() || null,
        Nationality: addr.Nationality?.toString() || null,
        TaxOffice: addr.TaxOffice?.toString() || null,
        GSTIN: addr.GSTIN?.toString() || null,
        GstType: addr.GstType?.toString() || null,
        CreateDate: addr.CreateDate?.toString() || null,
        CreateTime: addr.CreateTime,
        MYFType: addr.MYFType?.toString() || null,
        TaasEnabled: addr.TaasEnabled?.toString() || null,
        U_Municipio: addr.U_Municipio,
        U_CodDepartamento: addr.U_CodDepartamento,
      })) || [],
  };
};

export const mapFromSapBusinessPartner = (
  partner: SapBusinessPartner
): Partial<SapBusinessPartnerRaw> => {
  const result: Partial<SapBusinessPartnerRaw> = {
    CardCode: partner.code,
    CardName: partner.name,
    CardType: 'cCustomer' as CardType,
    GroupCode: partner.groupCode,
    Address: partner.address,
    MailAddress: partner.address,
    Phone1: partner.phone,
    FederalTaxID: partner.federalTaxId,
    City: partner.city,
    EmailAddress: partner.email,
    Cellular: partner.U_Celular || partner.phone,
    Country: 'CO' as Country,
    MailCity: partner.city,
    MailCountry: 'CO' as Country,

    PayTermsGrpCode: -1,
    CreditLimit: 0.0,
    MaxCommitment: 0.0,
    DiscountPercent: 0.0,
    VatLiable: 'vLiable' as VatLiable,
    DeductibleAtSource: 'tNO' as boolResponse,
    DiscountBaseObject: 'dgboNone' as DiscountBaseObject,
    DiscountRelations: 'dgrLowestDiscount' as DiscountRelations,
    PriceListNum: 4,
    IntrestRatePercent: 0.0,
    CommissionPercent: 0.0,
    CommissionGroupCode: 0,
    SalesPersonCode: 15,
    Currency: 'COP' as Currency,
    DefaultBankCode: '-1',
    FatherType: 'cPayments_sum' as FatherType,
    MinIntrest: 0.0,
    CurrentAccountBalance: 0.0,
    OpenDeliveryNotesBalance: 0.0,
    OpenOrdersBalance: 0.0,
    OpenChecksBalance: 0.0,
    CreditCardCode: -1,
    DebitorAccount: '13050501',

    Valid: 'tYES' as boolResponse,
    Frozen: 'tNO' as boolResponse,
    Block: partner.addresses?.[0]?.Block || '',
    BillToState: partner.addresses?.[0]?.State || '05',
    ShipToState: partner.addresses?.[0]?.State || '05',
    Priority: -1,
    BackOrder: 'tYES' as boolResponse,
    PartialDelivery: 'tYES' as boolResponse,
    BlockDunning: 'tNO' as boolResponse,
    HouseBankCountry: 'CO' as Country,
    ShipToDefault: 'DESPACHO' as BilltoDefault,
    CollectionAuthorization: 'tNO' as boolResponse,
    SinglePayment: 'tNO' as boolResponse,
    PaymentBlock: 'tNO' as boolResponse,
    PaymentBlockDescription: -1,
    MaxAmountOfExemption: 0.0,
    DeferredTax: 'tNO' as boolResponse,
    Equalization: 'tNO' as boolResponse,
    SubjectToWithholdingTax: 'boYES' as SubjectToWithholdingTax,
    AccrualCriteria: 'tNO' as boolResponse,
    DownPaymentClearAct: '28050501',
    BilltoDefault: 'PRINCIPAL' as BilltoDefault,
    CompanyPrivate: 'cCompany' as CompanyPrivate,
    LanguageCode: 25,
    WithholdingTaxDeductionGroup: -1,
    TaxRoundingRule: 'trr_CompanyDefault' as TaxRoundingRule,
    TypeReport: 'atCompany' as TypeReport,
    ThresholdOverlook: 'tNO' as boolResponse,
    SurchargeOverlook: 'tNO' as boolResponse,
    DownPaymentInterimAccount: '28050501',
    OperationCode347: 'ocSalesOrServicesRevenues' as OperationCode347,
    InsuranceOperation347: 'tNO' as boolResponse,
    HierarchicalDeduction: 'tNO' as boolResponse,
    ShaamGroup: 'sgServicesAndAsset' as ShaamGroup,
    WithholdingTaxCertified: 'tNO' as boolResponse,
    BookkeepingCertified: 'tNO' as boolResponse,
    Affiliate: 'tNO' as boolResponse,
    DatevFirstDataEntry: 'tYES' as boolResponse,
    UseShippedGoodsAccount: 'tYES' as boolResponse,
    Series: 1,
    EffectiveDiscount: 'dgrLowestDiscount' as DiscountRelations,
    NoDiscounts: 'tNO' as boolResponse,
    EffectivePrice: 'epDefaultPriority' as EffectivePrice,
    EffectivePriceConsidersPriceBeforeDiscount: 'tNO' as boolResponse,
    ResidenNumber: 'rntSpanishFiscalID' as ResidenNumber,
    UnifiedFederalTaxID: '1' as string,
    EndorsableChecksFromBP: 'tYES' as boolResponse,
    BlockSendingMarketingContent: 'tNO' as boolResponse,
    ExemptionMaxAmountValidationType: 'emaIndividual' as ExemptionMaxAmountValidationType,
    UseBillToAddrToDetermineTax: 'tNO' as boolResponse,
    FCERelevant: 'tNO' as boolResponse,
    FCEValidateBaseDelivery: 'tNO' as boolResponse,
    DataVersion: 1,
    ExchangeRateForIncomingPayment: 'tYES' as boolResponse,
    ExchangeRateForOutgoingPayment: 'tYES' as boolResponse,
    FCEAsPaymentMeans: 'tNO' as boolResponse,
    NotRelevantForMonthlyInvoice: 'tNO' as boolResponse,

    U_EsAutorret: partner.U_EsAutorret || 'N',
    U_BPCO_RTC: partner.U_BPCO_RTC || 'RS',
    U_BPCO_TDC: partner.U_BPCO_TDC || '11',
    U_BPCO_CS: partner.U_BPCO_CS || '05088',
    U_BPCO_City: partner.U_BPCO_City || partner.city,
    U_BPCO_TP: partner.U_BPCO_TP || '01',
    U_BPCO_Nombre: partner.U_BPCO_Nombre || '',
    U_BPCO_1Apellido: partner.U_BPCO_1Apellido || '',
    U_BPCO_2Apellido: partner.U_BPCO_2Apellido || '',
    U_BPCO_BPExt: '01' as UBpco,
    U_BPCO_TBPE: '-' as UBpco,
    U_BPCO_Address: partner.U_BPCO_Address || partner.address,
    U_NIT_Extranjero: null,
    U_Info_RUT: partner.U_Info_RUT || partner.federalTaxId,
    U_ZonaPostal_CC: '05088',
    U_DocFormEnt: '1',
    U_addInFaElectronica_email_contacto_FE:
      partner.U_addInFaElectronica_email_contacto_FE || partner.email,
    U_Celular: partner.U_Celular || partner.phone,
    U_Manejo: 'DIA' as UManejo,
    U_CSS_Dim3: 'DIR' as UCSSDim3,
    U_CSS_AplAprobaciones: 'Y' as UCSSAPLAprobaciones,
    ElectronicProtocols: [],

    BPAddresses: Array.isArray(partner.addresses)
      ? partner.addresses.map((addr, index) => ({
          AddressName: addr.AddressName || 'PRINCIPAL',
          Street: addr.Street || '',
          Block: addr.Block || null,
          ZipCode: addr.ZipCode || null,
          City: addr.City || '',
          County: addr.County || null,
          Country: addr.Country || 'CO',
          State: addr.State || '05',
          FederalTaxID: addr.FederalTaxID || partner.federalTaxId,
          TaxCode: addr.TaxCode || null,
          BuildingFloorRoom: addr.BuildingFloorRoom || null,
          AddressType: addr.AddressType || 'bo_BillTo',
          AddressName2: addr.AddressName2 || null,
          AddressName3: addr.AddressName3 || null,
          TypeOfAddress: addr.TypeOfAddress || null,
          BPCode: addr.BPCode || partner.code,
          RowNum: addr.RowNum !== undefined ? addr.RowNum : index,
          GlobalLocationNumber: addr.GlobalLocationNumber || null,
          Nationality: addr.Nationality || null,
          TaxOffice: addr.TaxOffice || null,
          GSTIN: addr.GSTIN || null,
          GstType: addr.GstType || null,
          CreateDate: null,
          CreateTime: addr.CreateTime || '000000',
          MYFType: addr.MYFType || null,
          TaasEnabled: 'tYES' as boolResponse, // Hardcodeado
          U_Municipio: addr.U_Municipio || '05088',
          U_CodDepartamento: addr.U_CodDepartamento || '05',
        }))
      : [],
  };
  return result;
};
